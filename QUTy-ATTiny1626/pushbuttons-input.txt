
void buttons_init() {
  // Enable pull-up resistors for PA [4:7]
  PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
  PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
  PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
  PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
}

// Push button states
uint8_t btn_previous = 0xFF; // Previous state of push buttons
uint8_t btn_new = 0xFF;      // New state of push buttons
uint8_t btn_falling; // Flags for detecting falling  push buttons
uint8_t btn_rising; // Flags for detecting rising edges of push buttons
volatile uint8_t pb_state = 0xFF;   // Volatile variable to store push button state

// Function: push_buttons_debounce
// Description: Debounce push button inputs.
// Arguments: None
// Returns: None
void push_buttons_debounce(void)
{
    static uint8_t count0 = 0;
    static uint8_t count1 = 0;

    uint8_t pb_sample = PORTA.IN;
    uint8_t pb_changed = pb_state ^ pb_sample;

    // Vertical counter
    count1 = (count1 ^ count0) & pb_changed;
    count0 = ~count0 & pb_changed;

    // New debounced state
    // Update if PB high for three samples
    pb_state ^= (count1 & count0);
}
/*
 * Function: void scan_button_status()
 * Description: Scan the status of buttons. 
 * Arguments: None
 * Returns: None
 */
void scan_button_status()
{
    // Previous debounced state
    btn_previous = btn_new;
    btn_new = pb_state;

    // Compare edge & prev/new state
    btn_falling = (btn_previous ^ btn_new) & btn_previous; // pressed - failling edge
    btn_rising = (btn_previous ^ btn_new) & btn_new;       // released - rising edge
}

// Function: uart_init
// Description: Initialize UART (Universal Asynchronous Receiver/Transmitter) hardware for communication.
void uart_init(void)
{

    // Set Tx pin as output
    PORTB.DIRSET = PIN2_bm;
    // Set the baud rate to 9600 for serial communication
    USART0.BAUD = 1389; //for 9600 baud rate = (64*3.333333MHZ)/(9600*16)
    // Enable receive complete interrupt to handle incoming data
    USART0.CTRLA = USART_RXCIE_bm;
    // Enable receiver and transmitter for UART communication
    USART0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;

    static FILE uart = FDEV_SETUP_STREAM(uart_send_char, uart_recv_char, _FDEV_SETUP_RW);
    stdout = &uart;
    stdin = &uart;
}
uint8_t rxbuf[256];             //Rx buffer
volatile uint8_t pWrite = 0;    //Index into Rx buffer
uint8_t pRead = 0;              //Index into Rx buffer

// Function: uart_recv_char
// Description: Waits for and retrieves a character from USART0.
// Arguments: None
// Returns: The received character.
int uart_recv_char(FILE *stream) {
    //Wait for buffer is empty or not
    while(!(pWrite-pRead));
    //Return character in buffer
    return rxbuf[pRead++];
}

// Function: uart_send_char
// Description: Sends a character over USART0.
// Arguments: c - The character to send.
// Returns: None
int uart_send_char(char c, FILE *stream) {
    //Wait while UART Tx busy
    while (!(USART0.STATUS & USART_DREIF_bm));
    //put char to Tx buffer
    USART0.TXDATAL = c;
    return c;
}

//USART - Rx ISR function
ISR(USART0_RXC_vect) {
    //push char to Rx buffer
    uint8_t ch = USART0.RXDATAL;
    rxbuf[pWrite++] = ch;
}
